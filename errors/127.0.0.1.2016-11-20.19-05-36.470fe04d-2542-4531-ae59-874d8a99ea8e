(dp1
S'output'
p2
S"<type 'exceptions.TypeError'> argument of type 'NoneType' is not iterable"
p3
sS'layer'
p4
S'/home/cool/Documents/ucsc/web2py/applications/lifeinvader/controllers/api.py'
p5
sS'code'
p6
S'# These are the controllers for your ajax api.\ndef index():\n    pass\n\n\n# Note that we need the URL to be signed, as this changes the db.\n@auth.requires_signature()\ndef add_post():\n    post_id = db.post.insert(\n        post_content = request.vars.post_content\n        # I should have put author here, but I\n        # handled it in tables.py\n    )\n    p = db.post(post_id)\n    return response.json(dict(post=p))\n\ndef edit_post():\n    #db(db.post.id == request.vars.post_id).update(post_content=vars.request.post_content)\n    p = db.post(request.vars.post_id)\n    p.post_content = request.vars.post_content\n    p.update_record()\n\n@auth.requires_signature()\ndef del_post():\n    db(db.post.id == request.vars.post_id).delete()\n\ndef do_search():\n    users = request.vars.form_search_content\n    query = db.auth_user.username.contains(users)\n    people = db(query).select()\n\ndef get_people():\n    start_index = int(request.vars.start_index) if request.vars.start_index is not None else 0\n    end_index = int(request.vars.end_index) if request.vars.end_index is not None else 0\n    people = []\n    has_more = False\n    rows = db().select(db.auth_user.ALL, limitby=(start_index, end_index + 1), orderby=db.auth_user.username)\n    for i, r in enumerate(rows):\n        if i < end_index - start_index:\n            p = dict(\n                id=r.id,\n                first_name=r.first_name,\n                last_name=r.last_name,\n                username=r.username,\n                email=r.email\n            )\n            people.append(p)\n        else:\n            has_more = True\n    return response.json(dict(\n        people=people,\n        has_more=has_more\n    ))\n\ndef toggle_like():\n    i = db(db.image.id == request.vars.image_id).select().first()\n    list = i.like_list\n    if request.vars.username not in list:\n        list = i.like_list + [request.vars.username]\n    else:\n        list.remove(request.vars.username)\n    i.update_record(\n        like_list=list,\n    )\n\ndef toggle_follow():\n    user = db(db.auth_user.username == request.vars.username).select().first()\n    add = db(db.auth_user.username == request.vars.add_user).select().first()\n\n    aud_list = user.audience_list\n    fol_list = add.follow_list\n\n    if request.vars.add_user not in aud_list:\n        aud_list = user.audience_list + [request.vars.add_user]\n        fol_list = add.follow_list + [request.vars.username]\n    else:\n        aud_list.remove(request.vars.add_user)\n        fol_list.remove(request.vars.username)\n    user.update_record(\n        audience_list=aud_list,\n    )\n\n    add.update_record(\n        follow_list=fol_list,\n    )\n\ndef get_comments():\n    comments = []\n    rows = db().select(db.image_comment.ALL, orderby=~db.image_comment.posted_on)\n    for i, r in enumerate(rows):\n        p = dict(\n            id=r.id,\n            comment_content=r.comment_content,\n            commenter=r.commenter,\n            image_id=r.image_id,\n            posted_on=r.posted_on\n        )\n        comments.append(p)\n    return response.json(dict(\n        comments=comments\n    ))\n\n\ndef add_comment():\n    comment_id = db.image_comment.insert(\n        comment_content=request.vars.comment_content,\n        image_id = request.vars.image_id,\n        commenter = auth.user.username if auth.user_id else None\n    )\n\n    i = db(db.image.id == request.vars.image_id).select().first()\n    list = i.comment_list\n\n    if request.vars.username not in list:\n        list = i.comment_list + [comment_id]\n\n    i.update_record(\n        comment_list=list,\n    )\n\n    c = db.image_comment(comment_id)\n    return response.json(dict(comment=c))\nresponse._vars=response._caller(add_comment)\n'
p7
sS'snapshot'
p8
(dp9
sS'traceback'
p10
S'Traceback (most recent call last):\n  File "/home/cool/Documents/ucsc/web2py/gluon/restricted.py", line 227, in restricted\n    exec ccode in environment\n  File "/home/cool/Documents/ucsc/web2py/applications/lifeinvader/controllers/api.py", line 123, in <module>\n  File "/home/cool/Documents/ucsc/web2py/gluon/globals.py", line 417, in <lambda>\n    self._caller = lambda f: f()\n  File "/home/cool/Documents/ucsc/web2py/applications/lifeinvader/controllers/api.py", line 114, in add_comment\n    if request.vars.username not in list:\nTypeError: argument of type \'NoneType\' is not iterable\n'
p11
s.