(dp1
S'output'
p2
S"<type 'exceptions.AttributeError'> 'NoneType' object has no attribute 'bio'"
p3
sS'layer'
p4
S'/home/cool/Documents/ucsc/web2py/applications/lifeinvader/controllers/default.py'
p5
sS'code'
p6
S'def index():\n    """\n    example action using the internationalization operator T and flash\n    rendered by views/default/index.html or views/generic.html\n\n    if you need a simple wiki simply replace the two lines below with:\n    return auth.wiki()\n    """\n    images = []\n    comments = []\n    if auth.user_id:\n        followers = db(db.auth_user.username == auth.user.username).select(db.auth_user.follow_list).first().follow_list\n        images = db((db.image.author.belongs(followers)) | (db.image.author == auth.user.username)).select(db.image.ALL,\n                                                                                                           orderby=~db.image.posted_on,\n                                                                                                           limitby=(\n                                                                                                           0, 20))\n        comments = db().select(db.image_comment.ALL)\n    return dict(get_username_from_email=get_username_from_email, get_firstname_from_email=get_firstname_from_email,\n                images=images, comments=comments)\n\n\ndef user():\n    """\n    exposes:\n    http://..../[app]/default/user/login\n    http://..../[app]/default/user/logout\n    http://..../[app]/default/user/register\n    http://..../[app]/default/user/profile\n    http://..../[app]/default/user/retrieve_password\n    http://..../[app]/default/user/change_password\n    http://..../[app]/default/user/bulk_register\n    use @auth.requires_login()\n        @auth.requires_membership(\'group name\')\n        @auth.requires_permission(\'read\',\'table name\',record_id)\n    to decorate functions that need access control\n    also notice there is http://..../[app]/appadmin/manage/auth to allow administrator to manage users\n    """\n\n    return dict(form=auth())\n\ndef edit_profile():\n    return dict(form=auth.profile())\n\ndef get_username_from_email(email):\n    u = db(db.auth_user.email == email).select().first()\n    if u is None:\n        return \'None\'\n    else:\n        return \' \'.join([u.first_name, u.last_name])\n\ndef get_firstname_from_email(email):\n    u = db(db.auth_user.email == email).select().first()\n    if u is None:\n        return \'None\'\n    else:\n        return u.first_name\n\ndef serve_file():\n    filename = request.args(0)\n    path = os.path.join(request.folder, \'static\', \'images\', filename)\n    return response.stream(path)\n\n\n@cache.action()\ndef download():\n    """\n    allows downloading of uploaded files\n    http://..../[app]/default/download/[filename]\n    """\n    return response.download(request, db)\n\n\ndef call():\n    """\n    exposes services. for example:\n    http://..../[app]/default/call/jsonrpc\n    decorate with @services.jsonrpc the functions to expose\n    supports xml, json, xmlrpc, jsonrpc, amfrpc, rss, csv\n    """\n    return service()\n\n@auth.requires_login()\ndef profile():\n    if request.args(0) is not None:\n        query = db.image.author == request.args(0)\n        user = request.args(0)\n        bio_query = db.auth_user.username == request.args(0)\n        bio = db(bio_query).select(db.auth_user.bio).first().bio\n    else:\n        query = db.image.author == auth.user.username\n        user = auth.user.username\n        bio = auth.user.bio\n\n    images = db(query).select(orderby=~db.image.posted_on, limitby=(0, 20))\n    user_profile = db(db.auth_user.username == user).select().first()\n\n    audience_count = len(db(db.auth_user.username == user).select().first().audience_list)\n    follower_count = len(db(db.auth_user.username == user).select().first().follow_list)\n\n    return dict(get_firstname_from_email=get_firstname_from_email,\n                images=images, user=user, bio=bio, user_profile = user_profile,\n                audience_count=audience_count, follower_count = follower_count)\n\n@auth.requires_login()\ndef upload():\n    form = SQLFORM(db.image)\n    if form.process().accepted:\n        session.flash = T(\'Image Posted.\')\n        redirect(URL(\'default\',\'index\'))\n    return dict(form=form)\nresponse._vars=response._caller(profile)\n'
p7
sS'snapshot'
p8
(dp9
sS'traceback'
p10
S'Traceback (most recent call last):\n  File "/home/cool/Documents/ucsc/web2py/gluon/restricted.py", line 227, in restricted\n    exec ccode in environment\n  File "/home/cool/Documents/ucsc/web2py/applications/lifeinvader/controllers/default.py", line 111, in <module>\n  File "/home/cool/Documents/ucsc/web2py/gluon/globals.py", line 417, in <lambda>\n    self._caller = lambda f: f()\n  File "/home/cool/Documents/ucsc/web2py/gluon/tools.py", line 4241, in f\n    return action(*a, **b)\n  File "/home/cool/Documents/ucsc/web2py/applications/lifeinvader/controllers/default.py", line 88, in profile\n    bio = db(bio_query).select(db.auth_user.bio).first().bio\nAttributeError: \'NoneType\' object has no attribute \'bio\'\n'
p11
s.